{"version":3,"sources":["components/Header.js","components/MemeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["Header","src","alt","Component","MemeGenerator","props","state","topText","bottomText","randomImg","allMemeImgs","handleChange","bind","handleSubmit","fetch","then","response","json","memes","data","console","log","setState","event","target","name","value","this","preventDefault","randNum","Math","floor","random","length","randMemeImg","url","className","action","onSubmit","type","onChange","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mRAkBeA,EAhBf,iLAEI,OACE,6BACE,gCACE,yBACEC,IAAI,iEACJC,IAAI,aAEN,mDATV,GAA4BC,a,cCqEbC,EArEf,YACE,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,QAAS,GACTC,WAAY,GACZC,UAAW,gCACXC,YAAa,IAEf,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATH,EADrB,iFAYuB,IAAD,OAClBE,MAAM,qCACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAa,IACTE,EAAUF,EAASG,KAAnBD,MACRE,QAAQC,IAAIH,GACZ,EAAKI,SAAS,CACZZ,YAAaQ,SAnBvB,mCAwBeK,GAAQ,IAAD,EACMA,EAAMC,OAAtBC,EADU,EACVA,KAAMC,EADI,EACJA,MACdC,KAAKL,SAAL,eACGG,EAAOC,MA3Bd,mCA+BeH,GACXA,EAAMK,iBACN,IAAMC,EAAUC,KAAKC,MAAMD,KAAKE,SAAWL,KAAKrB,MAAMI,YAAYuB,QAC5DC,EAAcP,KAAKrB,MAAMI,YAAYmB,GAASM,IACpDR,KAAKL,SAAS,CAAEb,UAAWyB,MAnC/B,+BAuCI,OACE,6BACE,0BAAME,UAAU,YAAYC,OAAO,GAAGC,SAAUX,KAAKd,cACnD,2BACE0B,KAAK,OACLd,KAAK,UACLe,SAAUb,KAAKhB,aACfe,MAAOC,KAAKrB,MAAMC,QAClBkC,YAAY,aAEd,2BACEF,KAAK,OACLd,KAAK,aACLe,SAAUb,KAAKhB,aACfe,MAAOC,KAAKrB,MAAME,WAClBiC,YAAY,gBAEd,wCAGF,yBAAKL,UAAU,QACb,yBAAKnC,IAAK0B,KAAKrB,MAAMG,UAAWP,IAAI,WACpC,wBAAIkC,UAAU,OAAOT,KAAKrB,MAAMC,SAChC,wBAAI6B,UAAU,UAAUT,KAAKrB,MAAME,kBA9D7C,GAAmCL,a,MCYpBuC,MATf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,MAAK,SAAAwC,GACjCA,EAAaC,kB","file":"static/js/main.26cf69d1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport class Header extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <header>\r\n          <img\r\n            src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\"\r\n            alt=\"Problem?\"\r\n          />\r\n          <p>Meme Generator</p>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\n\r\nexport class MemeGenerator extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      topText: \"\",\r\n      bottomText: \"\",\r\n      randomImg: \"http://i.imgflip.com/1bij.jpg\",\r\n      allMemeImgs: []\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this)\r\n  }\r\n  componentDidMount() {\r\n    fetch(\"https://api.imgflip.com/get_memes\")\r\n      .then(response => response.json())\r\n      .then(response => {\r\n        const { memes } = response.data;\r\n        console.log(memes);\r\n        this.setState({\r\n          allMemeImgs: memes\r\n        });\r\n      });\r\n  }\r\n\r\n  handleChange(event) {\r\n    const { name, value } = event.target;\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault()\r\n    const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length)\r\n    const randMemeImg = this.state.allMemeImgs[randNum].url\r\n    this.setState({ randomImg: randMemeImg })\r\n}\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form className=\"meme-form\" action=\"\" onSubmit={this.handleSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            name=\"topText\"\r\n            onChange={this.handleChange}\r\n            value={this.state.topText}\r\n            placeholder=\"Top Text\"\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            name=\"bottomText\"\r\n            onChange={this.handleChange}\r\n            value={this.state.bottomText}\r\n            placeholder=\"Bottom Text\"\r\n          />\r\n          <button>Gen</button>\r\n        </form>\r\n\r\n        <div className=\"meme\">\r\n          <img src={this.state.randomImg} alt=\"Random\" />\r\n          <h2 className=\"top\">{this.state.topText}</h2>\r\n          <h2 className=\"bottom\">{this.state.bottomText}</h2>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MemeGenerator;\r\n","import React from 'react';\nimport Header from './components/Header'\nimport MemeGenerator from './components/MemeGenerator'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <Header></Header>\n      <MemeGenerator></MemeGenerator>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}